#!usr/bin/python3.10

import sys
import socket
import threading


HEX_FILTER = "".join(                       # simple filter where will show if a char 
        [                                   # is printable or not
            (len(repr(chr(i))) == 3) and 
            chr(i) or 
            "." for i in range(0, 256)
        ])


def dumper(src, l=16, show=True):
    """
    Visualizer of the data shared between the machines.
    Setted as hexadecimal by default.
    """
    
    if isinstance(src, bytes):
        src = src.decode()

    res = list()
    for i in range(0, len(src), l):
        word = str(src[i:i + l])
        pr = word.translate(HEX_FILTER)
        hexw = l * 3
        hexa = " ".join([f"{ord(x):02X}" for x in word])
        res.append(f"{i:04x} {hexa:<{hexw}} {pr}")
    
    if show:
        for x in res:
            print(x)
    else:
        return res


def receive_from(conn):
    """
    Will implode all data received in a single bytes array.
    """

    buffer = b""
    conn.settimeout(5)
    try:
        while 1:
            data = conn.recv(4096)
            if not data:
                break
            buffer += data
    except Exception as e:
        pass

    return buffer


def proxy_handler(c_socket, r_host, r_port, fi):
    
    r_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # socket obj creation
    r_socket.connect((r_host, r_port))                              # connect the socket

    if fi:                                                          # if True will wait before sending
        r_buffer = receive_from(r_socket)
        dumper(r_buffer)

    # r_buffer = response_handler(r_buffer) if you want to manipulate the data received
    if len(r_buffer):
        print(f"[<--] Sending {len(r_buffer)} bytes to localhost.")
        c_socket.send(r_buffer)                                     # send data to localhost

    while 1:
        l_buffer = receive_from(c_socket)
        if len(l_buffer):
            print(f"[-->] Received {len(l_buffer)} bytes from localhost.")
            dumper(l_buffer)

            # l_buffer = request_handler(l_buffer)
            r_socket.send(l_buffer)                                 # send data to remote
            print("[-->] Sent to remote.")

        r_buffer = receive_from(r_socket)
        if len(r_buffer):
            print(f"[<--] Received {len(r_buffer)} bytes from remote.")
            dumper(r_buffer)

            # r_buffer = response_handler(r_buffer)
            c_socket.send(r_buffer)
            print("[<--] Sent to localhost.")

        if not len(l_buffer) or not len(r_buffer):                  # if one or both of data received
            c_socket.close()                                        # is 0 than close both connections.
            r_socket.close()
            print("[*] Closing connections.")
            break                                                   # break loop


def server_loop(l_host, l_port, r_host, r_port, fi):

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)      # create socket obj
    
    try:
        server.bind((l_host, l_port))                               # bind the server to localhost
    except Exception as e:
        print(str(e))
        print(f"\033[91m[!!!] Failed to listen on "
                f"{l_host}:{l_port}\n"
                f"\tCheck for other listening sockets or correct "
                f"permissions.\033[0m")
        sys.exit(0)

    print(f"[*] Listening on {l_host}:{l_port}")
    server.listen(5)

    while 1:
        c_socket, addr = server.accept()                            # accept connection

        print(f"> Incoming connection from {addr[0]}:{addr[1]}")

        t_proxy = threading.Thread(                                 # starting the thread 
                target=proxy_handler,
                args=(c_socket, r_host, r_port, fi))
        t_proxy.start()


def main():

    if len(sys.argv[1:]) != 5:
        print("\033[91mWrong number of parameters\033[0m\n"
                "Usage: python3 ./proxy.py [localhost] [localport] "
                "[remotehost] [remoteport] [receive first]\n"
                "Example: python3./proxy.py 127.0.0.1 9000 10.12.132.1 9000 1")
        return None

    l_host = sys.argv[1]
    l_port = int(sys.argv[2])

    r_host = sys.argv[3]
    r_port = int(sys.argv[4])
    fi = int(sys.argv[5]) != 1

    server_loop(l_host, l_port, r_host, r_port, fi)


if __name__ == "__main__":
    main()




