import argparse
import socket
import shlex
import subprocess
import sys
import textwrap
import threading

class NetCat:

    def __init__(self, args, buffer=None):
        self.args = args
        self.buffer = buffer
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    def handle(self, c_socket):
        
        if self.args.execute:
            o = execute(self.args.execute)
            c_socket.send(o.encode())
        
        elif self.args.upload:
            file_buffer = b""
            while True:
                data = c_socket.recv(4096)
                if data:
                    file_buffer += daata
                else:
                    break
            with open(self.args.upload, 'wb') as f:
                f.write(file_buffer)
            c_socket.send(f"Saved file {self.args.upload}".encode())
        
        elif self.args.command:
            cmd_buffer = b""

            while True:
                try:
                    c_socket.send(b"#> ")
                    while "\n" not in cmd_buffer.decode():
                        cmd_buffer += c_socket.recv(64)
                    response = execute(cmd_buffer.decode())
                    if response:
                        c_socket.send(response.encode())
                    cmd_buffer = b""
                except Exception as e:
                    print(f"Error! Server closed: \n{str(e)}")
                    self.socket.close()
                    sys.exit()

    def send(self):
        self.socket.connect((self.args.target, self.args.port))
        if self.buffer:
            self.socket.send(self.buffer)

        try:
            while True:
                recv_len = 1
                response = ""
                while recv_len:
                    data = self.socket.recv(4096)
                    recv_len = len(data)
                    response += data.decode()
                    if recv_len < 4096:
                        break
                    if response:
                        print(response)
                        buffer = input("> ")
                        buffer += "\n"
                        self.socket.send(buffer.encode())
        except KeyboardInterrupt:
            print("Connection closed.")
            self.socket.close()
            sys.exit()

    def listen(self):
        self.socket.bind((self.args.target, self.args.port))
        self.socket.listen(5)
        while True:
            c_thread = threading.Thread(
                    target=self.handle,
                    args=(self.socket.accept()[0], )
                    )
            c_thread.start()

    def run(self):
        if self.args.listen:
            self.listen()
        else:
            self.send()


def execute(cmd):
    cmd = cmd.strip()
    
    if not cmd:
        return None
    return subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT).decode()


def main():

    parser = argparse.ArgumentParser(
            description="Net Tool", 
            formatter_class=argparse.RawDescriptionHelpFormatter, 
            epilog=textwrap.dedent("""Help should be here"""))

    st = "store_true"
    parser.add_argument('-c', "--command", action=st, help="command_shell")
    parser.add_argument('-e', "--execute", help="execute command")
    parser.add_argument('-l', "--listen", action=st, help="listen")
    parser.add_argument('-p', "--port", type=int, default=5555, help="specify port")
    parser.add_argument('-t', "--target", default="192.168.1.203", help="specify IP")
    parser.add_argument('-u', "--upload", help="upload file")
    args = parser.parse_args()
    
    if args.listen:
        buffer = ""
    else:
        buffer = sys.stdin.read()

    nc = NetCat(args, buffer.encode())
    nc.run()


if __name__ == "__main__":
    main()
